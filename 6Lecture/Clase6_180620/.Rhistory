p2
p2 <- ggplot(house_prices, aes(x = bedrooms)) + geom_histogram(fill = "orange", color="white") +
labs(x = "living space (square feet)", title = "House size")
p2 <- ggplot(house_prices, aes(x = bedrooms)) + geom_histogram(fill = "orange", color="white") +
labs(x = "living space (square feet)", title = "House size")
p2
p3 <- ggplot(house_prices, aes( x= grade)) +
geom_bar(aes(fill=grade)) +
labs(x= 'Grade', title = 'House Condition') +
theme(legend.position = 'None')
p3
p2 <- ggplot(house_prices, aes(x = floors)) + geom_histogram(fill = "orange", color="white") +
labs(x = "living space (square feet)", title = "House size")
p2
p2 <- ggplot(house_prices, aes(x = floors)) + geom_histogram(fill = "brown", color="white") +
labs(x = "living space (square feet)", title = "House size")
p2
p3 <- ggplot(house_prices, aes( x= grade)) +
geom_bar(aes(fill=grade)) +
labs(x= 'Grade', title = 'House Grade') +
theme(legend.position = 'None')
p3
p2 <- ggplot(house_prices, aes(x = floors)) + geom_histogram(fill = "brown", color="white") +
labs(x = "living space (square feet)", title = "House Floors")
p2
p2 <- ggplot(house_prices, aes(x = floors)) + geom_histogram(fill = "brown", color="white") +
labs(x = "Number of Floors", title = "House Floors")
p2
p3 <- ggplot(house_prices, aes(x = grade)) + geom_histogram(fill = "blue", color="white") +
labs(x = "Grade", title = "House Grade")
p3
p3 <- ggplot(house_prices, aes( x= grade)) +
geom_bar(aes(fill=grade)) +
labs(x= 'Grade', title = 'House Grade') +
theme(legend.position = 'None')
p3
ggplot(house_prices, aes(y = price, x = grade, color = factor(bedrooms))) +
geom_jitter()
ggplot(house_prices, aes(y = price, x = grade, color = factor(bedrooms))) +
geom_boxplot()
ggplot(house_prices, aes(y = price, x = grade)) +
geom_boxplot()
ggplot(house_prices, aes(y = price, x = yr_built)) +
geom_boxplot()
ggplot(house_prices, aes(y = price, x = factor(yr_built))) +
geom_boxplot()
ggplot(house_prices, aes(y = price, x = factor(yr_renovated))) +
geom_boxplot()
ggplot(house_prices, aes(y = price, x = factor(yr_renovated))) +
geom_boxplot(fill=grade)
ggplot(house_prices, aes(y = price, x = factor(yr_renovated))) +
geom_boxplot(fill='grade')
ggplot(house_prices, aes(y = price, x = factor(yr_renovated))) +
geom_boxplot()
ggplot(house_prices, aes(y = price, x = factor(yr_renovated), color= grade)) +
geom_boxplot()
ggplot(house_prices, aes(y = price, x = factor(yr_renovated))) +
geom_boxplot()
g <- ggplot(house_prices, aes(price, bedrooms))
g + geom_boxplot(aes(fill=factor(bedrooms))) +  scale_fill_brewer(palette = "Spectral") +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box plot",
subtitle="City Mileage grouped by Class of vehicle",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
g <- ggplot(house_prices, aes(price, bedrooms))
g + geom_boxplot(aes(fill=factor(bedrooms))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box plot",
subtitle="City Mileage grouped by Class of vehicle",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
g <- ggplot(house_prices, aes(bedrooms, price))
g + geom_boxplot(aes(fill=factor(bedrooms))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box plot",
subtitle="City Mileage grouped by Class of vehicle",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
g <- ggplot(house_prices, aes(factor(bedrooms), price))
g + geom_boxplot(aes(fill=factor(bedrooms))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box plot",
subtitle="City Mileage grouped by Class of vehicle",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
g <- ggplot(house_prices, aes(factor(bedrooms), price))
g + geom_boxplot(aes(fill=factor(grade))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box plot",
subtitle="City Mileage grouped by Class of vehicle",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
g <- ggplot(house_prices, aes(factor(bedrooms), price))
g + geom_boxplot(aes(fill=factor(floors))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box plot",
subtitle="City Mileage grouped by Class of vehicle",
caption="Source: mpg",
x="Class of Vehicle",
y="City Mileage")
g <- ggplot(house_prices, aes(factor(bedrooms), price))
g + geom_boxplot(aes(fill=factor(floors))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box plot",
subtitle="Price of the house grouped by number of bedrooms & floors",
caption="Source: house_prices",
x="Number of bedrooms",
y="Price")
g <- ggplot(house_prices, aes(factor(bedrooms), price))
g + geom_boxplot(aes(fill=factor(floors))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box plot",
subtitle="Price of the house grouped by number of bedrooms & floors",
caption="Source: house_prices",
x="Number of bedrooms",
y="Price")
source('~/.active-rstudio-document', echo=TRUE)
install.packages(shiny)
source('~/.active-rstudio-document', echo=TRUE)
install.packages('shiny')
install.packages('shiny')
source('~/.active-rstudio-document', echo=TRUE)
runApp('5C_AR130620')
runApp('5C_AR130620')
runApp('5C_AR130620')
runApp('5C_AR130620')
runApp('5C_AR130620')
runApp('5C_AR130620')
runApp('Documents/Master_4Sem/AARC/5C_AR130620')
runApp('Documents/Master_4Sem/AARC/5C_AR130620')
runApp('Documents/Master_4Sem/AARC/5C_AR130620')
runApp('Documents/Master_4Sem/AARC/5C_AR130620')
library(colourpicker)
runApp('Documents/Master_4Sem/AARC/5C_AR130620')
runApp('Documents/Master_4Sem/AARC/5C_AR130620')
runApp('5C_ACT_AA130620')
theme_grey()
st_data
runApp()
runApp()
library(tidyverse)
mpg
ggplot(mpg, aes(x= displ, y = hwy))+
geom_point()
ggplot(mpg, aes(x= displ, y = hwy, color=drv, shape= drv))+
geom_point()
ggplot(mpg, aes(x= displ, y = hwy, color=drv))+
geom_point() + geom_smooth()
ggplot(mpg, aes(hwy, fill=drv))+
geom_histogram(binwidth=3)
ggplot(mpg, aes(x = drv, y = hwy, fill=drv)) +
geom_boxplot()
ggplot(mpg, aes(hwy, fill=drv))+
geom_histogram(binwidth=2) + facet_wrap(drv~.)
#qplot(hwy, data = mpg, fill= drv,facets= drv ~., binwidth=2)
ggplot(mpg, aes(x= displ, y = hwy, color=drv))+
geom_point() + geom_smooth() + facet_wrap(.~drv)
#qplot(displ, hwy, data=mpg, color=drv, facets=drv ~., geom=c('point','smooth'))
ggplot(mpg, aes(x=hwy, fill=drv)) +geom_density() + facet_wrap(.~drv)
#qplot(hwy, data = mpg, facets=.~drv, binwidth=2, fill= drv, geom = 'density')
library(nycflights13)
library(gapminder)
flights
daily <- flights %>%
group_by(dest,day) %>%
summarize(count = n())
daily
ggplot(daily, aes(x = day, y = count, color = dest, shape=dest)) +
geom_point() +
scale_y_continuous(name='number of flights',
trans= 'log2',
breaks= c(1 ,2,4,8,16,32,64,128,256,512)) +
scale_x_continuous(name= 'day',
breaks= c(0,5,10,15,20,25,30)) +
scale_shape_manual(values = rep(0:5, 20)) +
labs(title = "Flights", y = "number of flights")
ggplot(daily, aes(x = day, y = count, color = dest)) +
geom_line() +
scale_y_continuous(name='number of flights',
trans= 'log2',
breaks= c(1 ,2,4,8,16,32,64,128,256,512)) +
scale_x_continuous(name= 'day',
breaks= c(0,5,10,15,20,25,30)) +
labs(title = "Flights", y = "number of flights")
loc <- list()
for ( destination in unique(flights$dest)) {
tmp = filter(daily, dest == destination)
loc[[destination]] <- sample_n(tmp,1)
}
loc <- do.call(rbind, loc)
ggplot(daily, aes(x = day, y = count, color = dest, shape = dest)) +
geom_line() +
scale_y_continuous(name='number of flights',
trans= 'log2',
breaks= c(1 ,2,4,8,16,32,64,128,256,512)) +
scale_x_continuous(name= 'day',
breaks= c(0,5,10,15,20,25,30)) +
scale_shape_manual(values = rep(0:5, 20)) +
labs(title = 'Flights') +
labs(x = 'day', y = 'Number of flights') +
annotate('text', x = loc$day, y = loc$count, label = loc$dest, size =2 )
mpg
ggplot(mpg, aes(x= factor(model), y=displ, color=cty, size=cyl)) +geom_point()
gapminder %>%
group_by(year, continent) %>%
summarize(meanLifeExp = mean(lifeExp), totalPop= sum(as.numeric(pop)))
ggplot(gapminder, aes(x= gdpPercap, y=lifeExp, color=pop)) +geom_point() + scale_x_log10() + labs(title = "Gapminder")
ggplot(daily, aes(x = day, y = count, color = dest, shape=dest)) +
geom_point() +
scale_y_continuous(name='number of flights',
trans= 'log2',
breaks= c(1 ,2,4,8,16,32,64,128,256,512)) +
scale_x_continuous(name= 'day',
breaks= c(0,5,10,15,20,25,30)) +
scale_shape_manual(values = rep(0:5, 20)) +
labs(title = "Flights", y = "number of flights")
ggplot(daily, aes(x = day, y = count, color = dest)) +
geom_line() +
scale_y_continuous(name='number of flights',
trans= 'log2',
breaks= c(1 ,2,4,8,16,32,64,128,256,512)) +
scale_x_continuous(name= 'day',
breaks= c(0,5,10,15,20,25,30)) +
labs(title = "Flights", y = "number of flights")
p_before <-ggplot(house_prices, aes(x= sqft_above)) +
geom_histogram(bindwidth=40, color='white') +
labs(x = 'Squared meters', title = 'House size: Before')
library(patchwork)
View(house_prices)
glimpse(house_prices)
library(moderndive)
library(tidyverse)
library(patchwork)
View(house_prices)
glimpse(house_prices)
p_before <-ggplot(house_prices, aes(x= sqft_above)) +
geom_histogram(bindwidth=40, color='white') +
labs(x = 'Squared meters', title = 'House size: Before')
p_after_size <-ggplot(house_prices_new, aes(x= floors)) +
geom_histogram(bins=40, color='white', fill='purple') +
labs(x = 'Floors', title = 'House number of floors')
p_before <-ggplot(house_prices, aes(x= sqft_above)) +
geom_histogram(bindwidth=40, color='white') +
labs(x = 'Squared meters', title = 'House size: Before')
p_after_size <-ggplot(house_prices, aes(x= floors)) +
geom_histogram(bins=40, color='white', fill='purple') +
labs(x = 'Floors', title = 'House number of floors')
p_before + p_after_size
p_before <-ggplot(house_prices, aes(x= sqft_above)) +
geom_histogram(bindwidth=40, color='white') +
labs(x = 'Squared meters', title = 'House size: Before')
p_after_size <-ggplot(house_prices, aes(x= price)) +
geom_histogram(bins=40, color='white', fill='purple') +
labs(x = 'Floors', title = 'House number of floors')
p_before + p_after_size
p_before <-ggplot(house_prices, aes(x= sqft_above)) +
geom_histogram(bindwidth=40, color='white') +
labs(x = 'Squared meters', title = 'House size: Before')
p_after_size <-ggplot(house_prices, aes(x= log10(price))) +
geom_histogram(bins=40, color='white', fill='purple') +
labs(x = 'Floors', title = 'House number of floors')
p_before + p_after_size
(p_after_size + p_after_price) / p3
p3 <- ggplot(house_prices, aes( x= grade)) +
geom_bar(aes(fill=grade)) +
labs(x= 'Grade', title = 'House Grade') +
theme(legend.position = 'None')
p3
(p_after_size + p_after_price) / p3
(p_after_size + p_after_price) / p3
p_sqft_above <-ggplot(house_prices, aes(x= sqft_above)) +
geom_histogram(bindwidth=40, color='white') +
labs(x = 'Squared meters', title = 'House size: Before')
p_price <-ggplot(house_prices, aes(x= log10(price))) +
geom_histogram(bins=40, color='white', fill='purple') +
labs(x = 'Floors', title = 'House number of floors')
p_before + p_after_size
p_sqft_above <-ggplot(house_prices, aes(x= sqft_above)) +
geom_histogram(bindwidth=40, color='white') +
labs(x = 'Squared meters', title = 'House size: Before')
p_price <-ggplot(house_prices, aes(x= log10(price))) +
geom_histogram(bins=40, color='white', fill='purple') +
labs(x = 'Floors', title = 'House number of floors')
p_sqft_above + p_price
(p_sqft_above + p_price) / p3
p_sqft_above <-ggplot(house_prices, aes(x= sqft_above)) +
geom_histogram(bindwidth=40, color='white') +
labs(x = 'Squared meters', title = 'House size')
p_price <-ggplot(house_prices, aes(x= log10(price))) +
geom_histogram(bins=40, color='white', fill='purple') +
labs(x = 'Floors', title = 'House price')
p_sqft_above + p_price
(p_sqft_above + p_price) / p3
ggplot(house_prices_new, aes(x= sqft_above, y= log10(price), color= grade)) +
geom_point(alpha = 0.4, size=.8) +
labs(title = 'House prices in Seattle') +
facet_wrap(~condition) +
geom_smooth(method = 'lm')
ggplot(house_prices, aes(x= sqft_above, y= log10(price), color= grade)) +
geom_point(alpha = 0.4, size=.8) +
labs(title = 'House prices in Seattle') +
facet_wrap(~condition) +
geom_smooth(method = 'lm')
ggplot(house_prices, aes(x= sqft_above, y= log10(price), color= grade)) +
geom_point(alpha = 0.4, size=.8) +
labs(title = 'House prices in Seattle') +
facet_wrap(~grade) +
geom_smooth(method = 'lm')
ggplot(house_prices, aes(x= floors, y= log10(price), color= grade)) +
geom_point(alpha = 0.4, size=.8) +
labs(title = 'House prices in Seattle') +
facet_wrap(~grade) +
geom_smooth(method = 'lm')
ggplot(house_prices, aes(x= sqft_above, y= log10(price), color= grade)) +
geom_point(alpha = 0.4, size=.8) +
labs(title = 'House prices in Seattle') +
facet_wrap(~grade) +
geom_smooth(method = 'lm')
price_prediction <- lm(log10_price ~ sqft_above * grade, data= house_prices_new)
price_prediction <- lm(price ~ sqft_above * grade, data= house_prices)
parameters <- get_regression_table(price_prediction)
parameters
params <- parameters$estimate
prediction <- function(params, size, indx) {
output <- if(indx == 1) params[1] + params[2] *(size) else (params[1] + params[1+indx]) +  (params[2] + params[5+indx]) *(size)
return(10^(output)) # going back to dollars
}
prediction(params, 85, 3)
View(prediction)
params <- parameters$estimate
prediction <- function(params, size, indx) {
output <- if(indx == 1) params[1] + params[2] *(size) else (params[1] + params[1+indx]) +  (params[2] + params[5+indx]) *(size)
return(10^(output)) # going back to dollars
}
prediction(params, 85, 3)
params <- parameters$estimate
prediction <- function(params, size, indx) {
output <- if(indx == 1) params[1] + params[2] *(size) else (params[1] + params[1+indx]) +  (params[2] + params[5+indx]) *(size)
return(10^(output)) # going back to dollars
}
prediction(params, 2500, 3)
params <- parameters$estimate
prediction <- function(params, size, indx) {
output <- if(indx == 1) params[1] + params[2] *(size) else (params[1] + params[1+indx]) +  (params[2] + params[5+indx]) *(size)
return(10^(output)) # going back to dollars
}
prediction(params, 2500, 3)
params <- parameters$estimate
prediction <- function(params, size, indx) {
output <- if(indx == 1) params[1] + params[2] *(size) else (params[1] + params[1+indx]) +  (params[2] + params[5+indx]) *(size)
return(10^(output)) # going back to dollars
}
prediction(params, 2500, 3)
new_df = data.frame(grade = 6, bedrooms = 5)
new_df$grade = as.factor(new_df$grade)
predict(price_prediction, new_df)
new_df = data.frame(grade = 6, sqft_above = 5)
new_df$grade = as.factor(new_df$grade)
predict(price_prediction, new_df)
prediction(params, 2500, 3)
new_df = data.frame(grade = 6, sqft_above = 5)
new_df$grade = as.factor(new_df$grade)
predict(price_prediction, new_df)
shiny::runApp('Documents/GitHub_Personal/AARC/5Lecture/5C_ACT_AA130620')
median = median(cty)
median = median(cty)
compare_median <- mpg %>%
group_by(cyl) %>%
summarise(median = median(cty))
compare_median
compare_mean <- mpg %>%
group_by(cyl) %>%
summarise(mean = mean(cty))
compare_mean
compare_mode <- mpg %>%
group_by(cyl) %>%
summarise(mode = mode(cty))
compare_mode
runApp('Documents/GitHub_Personal/AARC/5Lecture/5C_ACT_AA130620')
install.packages("janeaustenr")
install.packages("tidytext")
install.packages("shinythemes")
library(janeaustenr)
library(janeaustenr)
library(tidytext)
library(janeaustenr)
library(tidytext)
library(shinythemes)
library(dplyr)
library(janeaustenr)
library(tidytext)
book_words <- austen_books() %>%
unnest_tokens(word, text) %>%
count(book, word, sort = TRUE)
total_words <- book_words %>%
group_by(book) %>%
summarize(total = sum(n))
book_words <- left_join(book_words, total_words)
book_words
library(dplyr)
library(janeaustenr)
library(tidytext)
book_words <- austen_books() %>%
unnest_tokens(word, text) %>%
count(book, word, sort = TRUE)
book_words
total_words <- book_words %>%
group_by(book) %>%
summarize(total = sum(n))
book_words <- left_join(book_words, total_words)
book_words
total_words <- book_words %>%
group_by(book) %>%
summarize(total = sum(n))
total_words
book_words <- left_join(book_words, total_words)
book_words
freq_by_rank <- book_words %>%
group_by(book) %>%
mutate(rank = row_number(),
`term frequency` = n/total)
freq_by_rank
book_words <- book_words %>%
bind_tf_idf(word, book, n)
book_words
book_words %>%
select(-total) %>%
arrange(desc(tf_idf))
book_words %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(book) %>%
top_n(15) %>%
ungroup() %>%
ggplot(aes(word, tf_idf, fill = book)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip()
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
runApp()
runApp()
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
book_words %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(book) %>%
top_n(15) %>%
ungroup() %>%
book_words %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(book) %>%
top_n(15) %>%
ungroup()
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
book_words %>%
ggplot(aes(word, tf_idf, fill = book)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf_idf") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip()
book_words %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(book) %>%
top_n(15) %>%
ungroup()
book_words
ggplot(book_words, aes(word, tf_idf, fill = book)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf_idf") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip()
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
book_words
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
book_words <- book_words %>%
bind_tf_idf(word, book, n)
book_words %>%
select(-total) %>%
arrange(desc(tf_idf))
book_words %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(book) %>%
top_n(15) %>%
ungroup() %>%
ggplot(aes(word, tf_idf, fill = book)) +
scale_fill_brewer(palette = 'Set2')+
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip() +
theme_minimal()
runApp('Documents/Master_4Sem/AARC/6Lecture/Clase6_180620')
